@context
{
	@public
	o = {prop: {prop: hex.mock.Sample.testRecursivity( anotherProvider.proxyValue( provider.getBool( true ) ) ).getConcanetatedName( anotherProvider.proxyValue( hex.mock.MockProvider.getString( '#' ) ) ), prop2: o2}, prop1: new hex.mock.ClassWithArgument( hex.mock.ClassWithArgument.getInstance( new hex.mock.ClassWithArgument( o2.clone() ) ) ) };

	@public
	o1 = new hex.mock.ClassWithArgument( hex.mock.ClassWithArgument.getInstance( new hex.mock.ClassWithArgument( o2.clone() ) ) );
	
	@public
	o2 = new hex.mock.ClassWithArgument( new hex.mock.ClassWithArgument( new hex.mock.ClassWithArgument( new hex.mock.ClassWithArgument() ) ) );

	@public
	o3 = {prop: ['key1' => [true], 'key2' => [true, false, anotherProvider.proxyValue( provider.getBool( true ) )] ], prop2: {p:new hex.mock.ClassWithArgument( hex.mock.ClassWithArgument.getInstance( new hex.mock.ClassWithArgument( o2.clone() ) ) )} };
	
	provider = new hex.mock.MockProvider();
	anotherProvider = new hex.mock.MockProvider();
}